/* Created by: Benjamin Edwards
 * Date: 10/10/2022
 * Description: Server program. The server always listens for clients.
 * A client once connected will be put into their own thread. In the thread, all the prime numbers between 0 and clientNumber will be found and store into an array 
 * which will be sent to the client.
 * The server will divide the task of finding all the prime numbers by creating x number of worker threads to handle its computation.the threads will work in parallel and return a array of the combined work.
 * 
 */

import java.net.*;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.*;
import java.io.*;
 
public class Server2
{
    public static void main(String[] args) throws IOException
    {   
        try
        {
            ServerSocket server = new ServerSocket(5247);
            System.out.println("Server started");
            System.out.println("Waiting for a client ...");

            //while loop to always listen to clients and create a thread for each one of them.
            while(true)
            {
                Socket client = server.accept();
                System.out.println("New client connected"+ client.getInetAddress().getHostAddress()); 

                ClientHandler t = new ClientHandler(client);

                new Thread(t).start();
            }

            
            
        }
        catch(IOException e)
        {
            e.printStackTrace(); 
        }
        
    }

    //client thread
    private static class ClientHandler implements Runnable
    {
        private final Socket clientSocket;
        int nThreads = Runtime.getRuntime().availableProcessors();
        //creates a forkjoinpool object and passes it the number of available threads
        ForkJoinPool forkJoinPool = new ForkJoinPool(nThreads); 

        //this class divides the work up between worker threads recurisvely. The worker threads work in parallel to find the prime numbers and add them to an array
        class calcPrimes extends RecursiveAction{
            // the threshold before the task is split up
            final int seqThreshold = 1000000; 
    
            int[] data;
            int end;
            int start;
            //takes in the array, start of the array and end of the array. Start can also be where the x'th task begins there job and end is when it ends its task
            calcPrimes(int[] data, int start, int end){
                this.data = data;
                this.start = start;
                this.end = end;
            }
            @Override
            protected void compute() { 

                //Debug
                System.out.println(
                    " activeThreads=" + forkJoinPool.getActiveThreadCount() +
                    " runningThreads=" + forkJoinPool.getRunningThreadCount() +
                    " poolSize=" + forkJoinPool.getPoolSize() +
                    " queuedTasks=" + forkJoinPool.getQueuedTaskCount() +
                    " queuedSubmissions=" + forkJoinPool.getQueuedSubmissionCount() +
                    " parallelism=" + forkJoinPool.getParallelism() +
                    " stealCount=" + forkJoinPool.getStealCount());
                //Debug end
                //if total length of array is less than threshold, find prime numbers
                if(end - start <= seqThreshold){ 
    
                int count = 0;
                //if true (prime) add to an array
                for (int i = 2; i <= end; i++) { 
                    if (isPrime(i)){
                        data[count] = i;
                        count++;
                    } 
                }
                //else, find mid and start another task to help fill array with primes
                } else {
                    int mid = (start + end) / 2;
                    //invokeAll forks the two recursive calls, creating another worker thread. 
                    invokeAll(new calcPrimes(data, start, mid),
                              new calcPrimes(data, mid, end));
                }
            }
            //finds primes, true means N is prime, false N is not prime
            private boolean isPrime(int N) {
                //base case, 0 and 1 are not prime
                if (N < 2) return false; 
                for (int i = 2; i <= Math.sqrt(N); i++) {
                     //if 0 then N has more than 2 factors and not a prime number
                    if (N % i == 0) return false;
                }
                return true;
            }
        }
        




        
        
        /////////////////////////////////////////////////////
        public void linearPrimes(int[] linear, int start, int end){

            int count = 0;
                //if true (prime) add to an array
                for (int i = 2; i <= end; i++) { 
                    if (isLinearPrime(i)){
                        linear[count] = i;
                        count++;
                    } 
                }
        }

        public boolean isLinearPrime(int N) {
            if (N < 2) return false; //base case, 0 and 1 are not prime
            for (int i = 2; i <= Math.sqrt(N); i++) {
                //if 0 then N has more than 2 factors and not a prime number
                if (N % i == 0) return false; 
            }
            return true;
        }
        //////////////////////////////////////////////////////////////////

        // default Constructor
        public ClientHandler(Socket socket)
        {
            this.clientSocket = socket;
        }
        
        public void run()
        {  
            DataOutputStream outInts = null;
            BufferedWriter outString = null;
            BufferedReader in = null;
            String line = null;
            String message;
            //eerorcode = 0 by defaut means client sent a valid number
            int errorCode = 0; 
            int clientNumber;
            System.out.println("Number of threads available for concurrency: " + nThreads);
            
            try 
            {
                
                outInts =  new DataOutputStream(clientSocket.getOutputStream());// get the outputstream of client
                outString = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));
                in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));// get the inputstream of client
                
                //while loop in order to keep checking user is sending a valid number. If they dont the server will send Client a error number 
                //to tell them to keep outputing numbers until they send a valid one.
                // If they do then they break from the loop
                while(true)
                {
                    line = in.readLine();
                    if((line.matches("[0-9]+")) && (Integer.parseInt(line) <= 100000001) && (Integer.parseInt(line) >= 0))
                    {
                        System.out.println("Client sent a valid number");
                        clientNumber = Integer.parseInt(line);
                        
                        errorCode = 0;
                        // to then send error code (in this case there is no error so, errorCode = 0)
                        outInts.writeInt(errorCode); 
                        outString.flush();

                        line = in.readLine();
                         //should be "client recieved error code"
                        System.out.println(line);
                        
                        message = "Number Recieved and is valid";
                        outString.write(message);
                        outString.newLine();
                        outString.flush();
                        break;
                    }
                    else
                    {
                        System.out.println("Client sent a invalid number");
                        errorCode = 1;
                        // to send error code (errorCode = 1)
                        outInts.writeInt(errorCode);
                        outString.flush();

                        line = in.readLine();
                        //should be client recieved error code
                        System.out.println(line); 

                        message = "You did not enter a valid number, please enter a large number in between 0 and 1,000,000 (without commas)";
                        outString.write(message);
                        outString.newLine();
                        outString.flush();   
                    }
                }          

            
                // creates thread to store prime numbers
                int[] allUpToN = new int[clientNumber];
                int[] linearCalc = new int[clientNumber];
                //creates task object passing array and its length
                calcPrimes task = new calcPrimes(allUpToN, 0, allUpToN.length);
                System.out.println("Client: " + clientSocket.getInetAddress().getHostAddress() + "Debug START"); //debug start
                long startTimeParallelism = System.currentTimeMillis();
                //starts task and returns the result, in this case only the array allUpToN is filled
                forkJoinPool.invoke(task); 
                long endTimeParallelism = System.currentTimeMillis();
                System.out.println("Client: " + clientSocket.getInetAddress().getHostAddress() + "Debug END"); //debug end
                System.out.println("Client: " + clientSocket.getInetAddress().getHostAddress() + " parallelism computation took " + ((endTimeParallelism - startTimeParallelism)) + " miliSeconds");
                
                
                long startTimeLinear = System.currentTimeMillis();
                linearPrimes(linearCalc, 0, linearCalc.length);
                long endTimeLinear = System.currentTimeMillis();
                
                System.out.println("Client: " + clientSocket.getInetAddress().getHostAddress() + " Linear computation took " + ((endTimeLinear - startTimeLinear)) + " miliSeconds");

                System.out.println("Sending array length...");
                outInts.writeInt(allUpToN.length);//sends client array length
                outInts.flush();
                
                System.out.println("Array length Sent");
                System.out.println("Sending array");
                for(int i = 0; i < allUpToN.length; i++){ //outputs array to client
                    
                    outInts.writeInt(allUpToN[i]);
                    outInts.flush(); 
                               
                }
                System.out.println("Sent array");    
                forkJoinPool.shutdown();

            }
            catch (IOException e) {
                e.printStackTrace();
            }
            finally 
            {
                try 
                {       

                  
                    outString.close();
                    outInts.close();
                    in.close();
                    clientSocket.close();
                }
                catch (IOException e) 
                {
                    e.printStackTrace();
                }
            }
        } 
    }
}
